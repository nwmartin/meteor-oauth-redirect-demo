// We're overriding the behavior of
// meteor/packages/accounts-oauth-helper/oauth_client.js
// to allow for not having the popup window behavior.

(function () {
  // Open a popup window pointing to a OAuth handshake page
  //
  // @param state {String} The OAuth state generated by the client
  // @param url {String} url to page
  // @param callback {Function} Callback function to call on
  //   completion. Takes one argument, null on success, or Error on
  //   error.
  // @param dimensions {optional Object(width, height)} The dimensions of
  //   the popup. If not passed defaults to something sane
  Accounts.oauth.initiateLogin = function(state, url, callback, dimensions) {

    // This'll be a regular page load.
    window.location.href = url;

    // Need to do something to receive the appropriate hook when they come back
    // so we can make the callback. The only real way we can do this is by
    // jacking into the front page and having the client go straight to
    // a tryLoginAfterPopupClosed. We're looking for the authState parameter set,
    // as below.
  };

  // Send an OAuth login method to the server. If the user authorized
  // access in the popup this should log the user in, otherwise
  // nothing should happen.
  // Note that we're basically just abusing this to force a login, as there's no
  // popup in our login process.
  var tryLoginAfterPopupClosed = function(state, callback) {
    Accounts.callLoginMethod({
      methodArguments: [{oauth: {state: state}}],
      userCallback: callback && function (err) {
        // Allow server to specify a specify subclass of errors. We should come
        // up with a more generic way to do this!
        if (err && err instanceof Meteor.Error &&
            err.error === Accounts.LoginCancelledError.numericError) {
          callback(new Accounts.LoginCancelledError(err.details));
        } else {
          callback(err);
        }
      }});
  };

  // Force a login if we can pull that off right now. If authState
  // is present, we can use that to attempt to login, as we've already
  // set our backing information in the database.
  var patt=/(authState=)(.*)/;
  match = document.URL.match(patt);
  if (match) {
    var state = match[2];
    tryLoginAfterPopupClosed(state, function(err, res) {
      if (err) { console.log(err); return; }
    });
  }

})();
